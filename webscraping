import requests
from bs4 import BeautifulSoup
import matplotlib
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import operator
from itertools import islice

pages=[]
names = []
years = []
imdb_ratings = []
metascores = []
votes = [] 
genres=[]
s_no=[]
meta_pos=[]
imdb_metarating=[]

for i in range(1,1001,50):
    url='https://www.imdb.com/search/title/?release_date=2019-01-01,2019-12-31&sort=num_votes,desc&start={}&ref_=adv_nxt'.format(i)
   
    pages.append(url)
    
for s in pages:
    response=requests.get(s)
    html_soup = BeautifulSoup(response.text, 'html.parser')
    type(html_soup)
    movie_containers = html_soup.find_all('div', class_ = 'lister-item mode-advanced')
    for container in movie_containers:
        s_no.append(i)
        name = container.h3.a.text
        names.append(name)	   
	# The IMDB rating
        imdb = float(container.strong.text)
        imdb_ratings.append(imdb)
	# The Metascore
        if container.find('div', class_ = 'ratings-metascore') is None:
            metascores.append(int(-1))
        else:
            m_score = container.find('span', class_ = 'metascore').text
            metascores.append(int(m_score))
            meta_pos.append(int(m_score))
            imdb_meta=float(container.strong.text)
            imdb_metarating.append(imdb_meta)
        
	 # The number of votes
        vote = container.find('span', attrs = {'name':'nv'})['data-value']
        votes.append(int(vote))
        
            
        genre=container.find('span',class_='genre').text
        genre=genre.strip()
        genre=genre.split(",")
        print (genre)
        genres.extend(genre)
        

      
        
        
        
s="____"*25
print(s)
for i in range (0,len(names)):
    data="{:2}|{:<50} |{:<4} | {:<3} | {:<10}  | {:^20}".format(i+1,names[i],imdb_ratings[i],metascores[i],votes[i],genres[i])
    
    print(data)
    
fig, axs = plt.subplots(1, 3, figsize=(9, 3), sharey=True)


import math

slabed_ratings =[math.ceil(i) for i in imdb_ratings]
slabed_ratings1=[math.ceil(i) for i in meta_pos]
meta_scores=[(i)*10 for i in imdb_metarating]

slabed_ratings=dict(Counter(slabed_ratings))
slabed_ratings1=dict(Counter(slabed_ratings1))
meta_scores=dict(Counter(meta_scores))

names=list(slabed_ratings.keys())
values=list(slabed_ratings.values())
names1=list(slabed_ratings1.keys())
values1=list(slabed_ratings1.values())
imdb1=list(meta_scores.keys())
imdb2=list(meta_scores.values())

plt.subplot(2,2,1)
plt.bar(names,values)
plt.title("imdb-ratings")

plt.subplot(2,2,2)
plt.bar(names1,values1)
plt.title("metascores")

plt.subplot(2,2,3)
plt.bar(imdb1,imdb2,label="ratings")
plt.bar(names1,values1,label="metascores")
plt.legend()
plt.title("combination of imdb and metascore")

genres=[i.strip() for i in genres]
genres=[i.strip("\n") for i in genres]
Genres=dict(Counter(genres))
Genres=dict(sorted(Genres.items(),key=operator.itemgetter(1),reverse=True))
sorted_genres=dict(islice(Genres.items(),5))
genres_names=list(sorted_genres.keys())
genres_values=list(sorted_genres.values())
ax=plt.subplot(2,2,4)
plt.title("Genres")

def func(pct, allvals):
    absolute = int(pct/100.*np.sum(allvals))
    return "{:.2f}%\n({:d} )".format(pct, absolute)


wedges, texts, autotexts = ax.pie(genres_values, autopct=lambda pct: func(pct, genres_values),
                                  textprops=dict(color="w"))

ax.legend(wedges, genres_names,
          title="Genre_names",
          loc="center left",
          bbox_to_anchor=(1, 0, 0.5, 1))

plt.setp(autotexts, size=8, weight="bold")





plt.show()

    



    

